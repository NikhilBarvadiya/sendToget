// ignore_for_file: non_constant_identifier_names, file_namesimport 'dart:typed_data';import 'package:flutter/material.dart';import 'package:flutter/services.dart';import 'package:sendtoget/Common/Utils/Color_Utils.dart';import 'package:sendtoget/Common/Utils/TextStyles.dart';import 'package:sendtoget/Data/Model/ThemeModel.dart';Widget CustomTextField({  Color? color,  String? hintText,  double? height,  dynamic prefix,  dynamic controller,  required ThemeModel themeModel,}) {  return Card(    elevation: 5,    shape: RoundedRectangleBorder(      borderRadius: BorderRadius.circular(30.0),    ),    child: SizedBox(      height: height,      child: Theme(        data: ThemeData().copyWith(          colorScheme: ThemeData().colorScheme.copyWith(                primary: themeModel.isDark ? white : black,              ),        ),        child: TextFormField(          controller: controller,          style: TextStyles.SmallHeaderTextStyles,          maxLength: 10,          keyboardType: TextInputType.number,          inputFormatters: [            FilteringTextInputFormatter.digitsOnly,          ],          decoration: InputDecoration(            prefix: prefix,            counterText: '',            contentPadding: const EdgeInsets.only(left: 15),            border: InputBorder.none,            hintText: hintText ?? '',            hintStyle: TextStyles.SmallHeaderTextStyles,          ),        ),      ),    ),  );}Widget CustomBotton({  String? text,  double? height,  double? width,  function,}) {  return GestureDetector(    onTap: function,    child: Card(      elevation: 5,      shape: RoundedRectangleBorder(        borderRadius: BorderRadius.circular(30.0),      ),      child: Container(        height: height,        width: width,        alignment: Alignment.center,        child: Text(          text ?? '',          style: TextStyles.SmallHeaderTextStyles,        ),      ),    ),  );}void show(BuildContext ctx, contact) {  showModalBottomSheet(      elevation: 10,      shape: RoundedRectangleBorder(        borderRadius: BorderRadius.circular(40),      ),      isScrollControlled: true,      context: ctx,      builder: (ctx) => FractionallySizedBox(        heightFactor: 0.5,        child: Container(          width: double.infinity,          decoration: const BoxDecoration(            borderRadius: BorderRadius.only(              topLeft: Radius.circular(40),              topRight: Radius.circular(40),            ),          ),          child: Padding(            padding: const EdgeInsets.symmetric(horizontal: 25, vertical: 25),            child: Column(              crossAxisAlignment: CrossAxisAlignment.start,              mainAxisSize: MainAxisSize.min,              children: [                contact.photo != null                    ? ClipRRect(                  borderRadius: BorderRadius.circular(40),                  child: Image.memory(                    Uint8List.fromList(contact.photo),                    scale: 5,                  ),                )                    : Container(                  height: 130,                  width: 130,                  decoration: BoxDecoration(                    borderRadius: BorderRadius.circular(40),                    color: Colors.blueAccent,                  ),                  child: const Icon(                    Icons.person,                    size: 50,                    color: Colors.white,                  ),                ),                Text(                  'Full name: ${contact.displayName}',                  style: const TextStyle(                    color: Colors.black,                    fontWeight: FontWeight.bold,                    fontSize: 20,                  ),                ),                Text(                  'Phone number: ${contact.phones.isNotEmpty ? contact.phones.first.number : '(none)'}',                  style: const TextStyle(                    color: Colors.black,                    fontWeight: FontWeight.bold,                    fontSize: 20,                  ),                ),                Text(                  'Email address: ${contact.emails.isNotEmpty ? contact.emails.first.address : '(none)'}',                  style: const TextStyle(                    color: Colors.black,                    fontWeight: FontWeight.bold,                    fontSize: 20,                  ),                ),              ],            ),          ),        ),      ),  );}